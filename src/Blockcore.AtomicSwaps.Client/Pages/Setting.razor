@page "/settings"

@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using NBitcoin
@using NBitcoin.Crypto
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Client.Services
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<Setting> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IBlockchainApiService BlockchainApiService
@inject IWalletService WalletService

<PageTitle>Settings</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
<MudText Align="Align.Center" Class="mb-8 mt-8"></MudText>

<MudTabs Elevation="1" Rounded="true" PanelClass="pa-6">
    <MudTabPanel Text="Options" ToolTip="Options">
        <MudText>Options</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Data" ToolTip="Data">
        <MudText>
            @if (hasWallet && _walletAccounts.Connected)
            {
                <button class="btn btn-danger" @onclick="DisconnectWallet">Disconnect Wallet</button>
                <br />
                <br />
                <button class="btn btn-danger" @onclick="WipeSwaps">Wipe Swaps (caution this may be irreversible)</button>
            }
        </MudText>
    </MudTabPanel>
</MudTabs>


@code {
    private bool hasWallet;
    private WalletAccounts _walletAccounts = new WalletAccounts();

    protected override async Task OnInitializedAsync()
    {
        hasWallet = await WalletConnector.HasBlockcoreWallet();
        _walletAccounts = storage.GetOrCreate<WalletAccounts>();
    }

    private void WipeSwaps()
    {
        // todo: don't allow this if any open swaps
        storage.DeleteSwaps();
    }

    private void DisconnectWallet()
    {
        WalletService.ClearWallet();
        _walletAccounts = new WalletAccounts();
    }
}
