@page "/settings"

@using Blockcore.AtomicSwaps.BlockcoreDns;
@using Blockcore.AtomicSwaps.BlockcoreDns.Models;
@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using NBitcoin
@using NBitcoin.Crypto
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Client.Services
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<Setting> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IBlockchainApiService BlockchainApiService
@inject IWalletService WalletService
@inject IBlockcoreDnsService DnsService;

<PageTitle>Settings</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
<MudText Align="Align.Center" Class="mb-8 mt-8"></MudText>

<MudTabs Elevation="1" Rounded="true" PanelClass="pa-6">
    <MudTabPanel Text="Network Status" ToolTip="Network Status">
        @foreach (var item in _indexors)
        {
            <MudText>@item.Symbol</MudText>

            @foreach (var ind in item.Indexers)
            {
                @foreach (var res in ind.DnsResults)
                {
                    if (res.Online)
                    {
                        <li class="text-success">@res.Domain </li>
                    }
                    else
                    {
                        <li class="text-danger">@res.Domain </li>
                    }
                }
            }

        }
    </MudTabPanel>
    <MudTabPanel Text="Explorer" ToolTip="Explorer">
        @foreach (var item in _explorers)
        {
            <MudText>@item.Url</MudText>
            
                @foreach (var res in item.DnsResults)
                {
                   if (res.Online)
                    {
                        <li class="text-success">@res.Domain </li>
                    }
                    else
                    {
                        <li class="text-danger">@res.Domain </li>
                    }
                }
             
        }
    </MudTabPanel>
    <MudTabPanel Text="Data" ToolTip="Data">
        <MudText>
            @if (hasWallet && _walletAccounts.Connected)
            {
                <button class="btn btn-danger" @onclick="DisconnectWallet">Disconnect Wallet</button>
                <br />
                <br />
                <button class="btn btn-danger" @onclick="WipeSwaps">Wipe Swaps (caution this may be irreversible)</button>
            }
        </MudText>
    </MudTabPanel>
</MudTabs>


@code {
    private bool hasWallet;
    private WalletAccounts _walletAccounts = new WalletAccounts();
    List<string> _networkList = new();

    List<DnsServices> _explorers = new();

    List<NetworkIndexers> _indexors = new();

    protected override async Task OnInitializedAsync()
    {
        hasWallet = await WalletConnector.HasBlockcoreWallet();
        _walletAccounts = storage.GetOrCreate<WalletAccounts>();
        _networkList = SwapsConfiguration.Networks.Keys.ToList();

        await LoadExplorers();

        await LoadIndexers();

    }

    private async Task LoadIndexers()
    {
        foreach (var item in _networkList)
        {
            var indexers = await DnsService.GetServicesByNetwork(item);
            _indexors.Add(new NetworkIndexers() { Symbol = item, Indexers = indexers.ToList() });
        }

    }

    private void UpdatedSelectedIndexer()
    {

    }

    private async Task LoadExplorers()
    {
        var explorers = await DnsService.GetServicesByType("Explorer");
        _explorers = explorers.ToList();
    }

    private void UpdatedSelectedExplorer()
    {

    }

    private void WipeSwaps()
    {
        // todo: don't allow this if any open swaps
        storage.DeleteSwaps();
    }

    private void DisconnectWallet()
    {
        WalletService.ClearWallet();
        _walletAccounts = new WalletAccounts();
    }

    class NetworkIndexers
    {
        public string Symbol { get; set; }
        public List<DnsServices> Indexers { get; set; }
    }

}
