@page "/settings"

@using Blockcore.AtomicSwaps.BlockcoreDns;
@using Blockcore.AtomicSwaps.BlockcoreDns.Models;
@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using NBitcoin
@using NBitcoin.Crypto
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Client.Services
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<Setting> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IBlockchainApiService BlockchainApiService
@inject IWalletService WalletService
@inject IBlockcoreDnsService DnsService;

<PageTitle>Settings</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">Settings</MudText>
<MudText Align="Align.Center" Class="mb-8 mt-8"></MudText>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Network Status" ToolTip="Network Status">
        @if (_indexors.Count <= 0)
        {

            <div class="app-loading-spinner">
                <div class="spinner-border" role="status"></div>
                loading...
            </div>

        }
        else
        {
            @foreach (var item in _indexors)
            {
                <MudCard Class="mb-5">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatarGroup Max="1" Spacing="3" MaxColor="Color.Primary">
                                @{
                                    var networkImg = String.Format("https://chains.blockcore.net/assets/{0}/icon.png", @item.Symbol);
                                }
                                <MudAvatar Image="@networkImg" />
                            </MudAvatarGroup>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@item.Symbol</MudText>
                        </CardHeaderContent>

                    </MudCardHeader>
                    <MudCardContent>

                        <MudRadioGroup T="string" SelectedOption="@item.SelectedIndexer" SelectedOptionChanged="selectedOption => ChangeIndexer(item, selectedOption)">
                            @foreach (var ind in item.Indexers)
                            {

                                @foreach (var res in ind.DnsResults)
                                {
                                    @if (res.Online)
                                    {
                                        <MudRadio Color="Color.Success" Option="@res.Domain">@res.Domain</MudRadio>
                                        <br />
                                    }
                                    else
                                    {
                                        <MudRadio Color="Color.Error" Option="@res.Domain">@res.Domain</MudRadio>
                                        <br />
                                    }
                                }

                            }
                        </MudRadioGroup>
                    </MudCardContent>
                </MudCard>
            }
        }
    </MudTabPanel>
    <MudTabPanel Text="Explorer" ToolTip="Explorer">
        @if (_explorers.Count <= 0)
        {
            <div class="app-loading-spinner">
                <div class="spinner-border" role="status"></div>
                loading...
            </div>
        }
        else
        {
            <MudCard>
                <MudCardContent>


                    @foreach (var item in _explorers)
                    {
                        <MudRadioGroup T="string" SelectedOption="@SelectedExplorer" SelectedOptionChanged="ChangeExplorer">

                            @foreach (var res in item.DnsResults)
                            {
                                @if (res.Online)
                                {
                                    <MudRadio Color="Color.Success" Option="@res.Domain">@res.Domain</MudRadio>
                                }
                                else
                                {
                                    <MudRadio Color="Color.Error" Option="@res.Domain">@res.Domain</MudRadio>
                                }
                            }
                        </MudRadioGroup>

                    }


                </MudCardContent>
            </MudCard>
        }
    </MudTabPanel>
    <MudTabPanel Text="Data" ToolTip="Data">

        @if (hasWallet && _walletAccounts.Connected)
        {
            <MudCard>
                <MudCardContent>
                    <button class="btn btn-danger" @onclick="DisconnectWallet">Disconnect Wallet</button>
                    <br />
                    <br />
                    <button class="btn btn-danger" @onclick="WipeSwaps">Wipe Swaps (caution this may be irreversible)</button>
                </MudCardContent>
            </MudCard>
        }
    </MudTabPanel>
</MudTabs>


@code {
    private bool hasWallet;
    private WalletAccounts _walletAccounts = new WalletAccounts();
    List<string> _networkList = new();

    List<DnsServices> _explorers = new();

    List<NetworkIndexers> _indexors = new();
    public string SelectedExplorer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hasWallet = await WalletConnector.HasBlockcoreWallet();
        _walletAccounts = storage.GetOrCreate<WalletAccounts>();
        _networkList = SwapsConfiguration.Networks.Keys.ToList();

        await storage.FetchIndexerAndExplorer(false);

        await LoadExplorers();
        SelectedExplorer = storage.GetExplorerUrl().Replace("https://", "");

        await LoadIndexers();

    }

    private async Task LoadIndexers()
    {
        foreach (var item in _networkList)
        {
            var indexers = await DnsService.GetServicesByNetwork(item);
            _indexors.Add(new NetworkIndexers() { Symbol = item, Indexers = indexers.ToList(), SelectedIndexer = storage.GetIndexerUrl(item) != null ? storage.GetIndexerUrl(item).Replace("https://", "").Replace("/api", "") : string.Empty });
        }

    }

    private async Task LoadExplorers()
    {
        var explorers = await DnsService.GetServicesByType("Explorer");
        _explorers = explorers.ToList();
    }

    private void WipeSwaps()
    {
        // todo: don't allow this if any open swaps
        storage.DeleteSwaps();
    }

    private void DisconnectWallet()
    {
        WalletService.ClearWallet();
        _walletAccounts = new WalletAccounts();
    }

    class NetworkIndexers
    {
        public string Symbol { get; set; }
        public List<DnsServices>? Indexers { get; set; }
        public string? SelectedIndexer { get; set; }
    }

    public void ChangeExplorer(string selectedExplorer)
    {
        SelectedExplorer = selectedExplorer;

        if (selectedExplorer != null)
        {
            storage.SetExplorerUrl(selectedExplorer);

        }
    }

    private void ChangeIndexer(NetworkIndexers item, string selectedOption)
    {
        item.SelectedIndexer = selectedOption;

        if (item.SelectedIndexer != null)
        {
            storage.SetIndexerUrl(item.Symbol, item.SelectedIndexer);
        }
    }

}
