@page "/findswaps"

@using Blockcore.AtomicSwaps.Client.Services;
@using NBitcoin
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Shared
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<FindSwaps> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject ISnackbarService SnackbarService

<PageTitle>Find Atomic Swaps</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">Find Atomic Swaps</MudText>
<MudText Align="Align.Center" Class="mb-8 mt-8">This component helps find available swaps.</MudText>

<MudButton Color="Color.Info" Variant="Variant.Filled" @onclick="Fetch" Class="mt-5 mb-5">Fetch Swaps</MudButton>

@if (swaps != null)
{


    <MudTable Items="@swaps" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Swap</MudTh>
            <MudTh>From</MudTh>
            <MudTh>TO</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Is Mine</MudTh>
            <MudTh>Status</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="text-one-line" DataLabel="Swap">
                <MudAvatarGroup Max="2" Spacing="3" MaxColor="Color.Primary">
                    @{
                        var makerCoinImg = String.Format("https://chains.blockcore.net/assets/{0}/icon.png", @context.SwapMaker.CoinSymbol);
                        var takerCoinImg = String.Format("https://chains.blockcore.net/assets/{0}/icon.png", @context.SwapTaker.CoinSymbol);
                    }
                    <MudAvatar Image="@makerCoinImg" />
                    <MudAvatar Image="@takerCoinImg" />
                </MudAvatarGroup>
            </MudTd>
            <MudTd Class="text-one-line" DataLabel="Maker">@Money.Satoshis(context.SwapMaker.Amount) - @context.SwapMaker.CoinSymbol</MudTd>
            <MudTd Class="text-one-line" DataLabel="Taker">@Money.Satoshis(context.SwapTaker.Amount) - @context.SwapTaker.CoinSymbol</MudTd>
            <MudTd Class="text-one-line" DataLabel="Date">@context.Created </MudTd>
            <MudTd Class="text-one-line" DataLabel="Is Mine">@(_walletAccounts.HasAccountKey(context.SwapMaker.SenderPubkey) ? "I am maker" : _walletAccounts.HasAccountKey(context.SwapTaker.SenderPubkey) ? "I am taker" : "not my swap")</MudTd>
                <MudTd Class="text-one-line" DataLabel="Status">@context.Status </MudTd>
                <MudTd DataLabel="Details">
                    <MudButton Color="Color.Info" Variant="Variant.Filled" @onclick="() => this.ViewSwap(context.SwapSessionId)">Details</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
}

@code {
    private IEnumerable<SwapSession> swaps = new List<SwapSession>();
    private bool _loading;

    Networks.Network network;
    List<string> NetworkList;

    string error;

    string SwapFrom = "STRAX";
    string SwapTo = "CITY";

    long amountToSell = 1;
    long amountToBuy = 10;
    private bool hasWallet;
    WalletAccounts? _walletAccounts;

    private async Task Fetch()
    {
        try
        {
            this.swaps = await Http.GetFromJsonAsync<List<SwapSession>>("api/SwapCoordinator");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            await SnackbarService.ShowMessage(error, Defaults.Classes.Position.BottomEnd, Severity.Error);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        NetworkList = SwapsConfiguration.Networks.Keys.ToList();

        if (await WalletConnector.HasBlockcoreWallet() == false)
        {
            hasWallet = false;
            return;
        }

        hasWallet = true;

        _walletAccounts = storage.GetOrCreate<WalletAccounts>();

        await this.Fetch();
    }

    protected async Task ViewSwap(string session)
    {
        NavigationManager.NavigateTo($"viewswap/{session}");
    }

}
