@page "/findswaps"

@using Blockcore.AtomicSwaps.Client.Services;
@using NBitcoin
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Shared
@inject HttpClient Http
@inject Storage Storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<FindSwaps> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject ISnackbarService SnackbarService

<PageTitle>Find Atomic Swaps</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">Find Atomic Swaps</MudText>
<MudText Align="Align.Center" Class="mb-8 mt-8"></MudText>

@if (!_hasWallet)
{
    <MudAlert Severity="Severity.Normal" Class="mt-3 mb-3">No wallet found please install the wallet at blockcore.net</MudAlert>
}
else
{

    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="Fetch" Class="mt-5 mb-5">Fetch Swaps</MudButton>

    @if (_swaps != null)
    {


        <MudTable Items="@_swaps" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Primary">
            <HeaderContent>
                <MudTh>Swap</MudTh>
                <MudTh>From</MudTh>
                <MudTh>TO</MudTh>
                <MudTh>Date</MudTh>
                <MudTh>Is Mine</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="text-one-line" DataLabel="Swap">
                    <MudAvatarGroup Max="2" Spacing="3" MaxColor="Color.Primary">
                        @{
                            var makerCoinImg = String.Format("https://chains.blockcore.net/assets/{0}/icon.png", @context.SwapMaker.CoinSymbol);
                            var takerCoinImg = String.Format("https://chains.blockcore.net/assets/{0}/icon.png", @context.SwapTaker.CoinSymbol);
                        }
                        <MudAvatar Image="@makerCoinImg" />
                        <MudAvatar Image="@takerCoinImg" />
                    </MudAvatarGroup>
                </MudTd>
                <MudTd Class="text-one-line" DataLabel="Maker">@Money.Satoshis(context.SwapMaker.Amount) - @context.SwapMaker.CoinSymbol</MudTd>
                <MudTd Class="text-one-line" DataLabel="Taker">@Money.Satoshis(context.SwapTaker.Amount) - @context.SwapTaker.CoinSymbol</MudTd>
                <MudTd Class="text-one-line" DataLabel="Date">@context.Created </MudTd>
                <MudTd Class="text-one-line" DataLabel="Is Mine">@(_walletAccounts.HasAccountKey(context.SwapMaker.SenderPubkey) ? "I am maker" : _walletAccounts.HasAccountKey(context.SwapTaker.SenderPubkey) ? "I am taker" : "not my swap")</MudTd>
                    <MudTd Class="text-one-line" DataLabel="Status">@context.Status </MudTd>
                    <MudTd DataLabel="Details">
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="() => this.ViewSwap(context.SwapSessionId)">Details</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
    }

}


@code {
    private IEnumerable<SwapSession> _swaps = new List<SwapSession>();
    private bool _loading;
    private bool _hasWallet;
    private WalletAccounts? _walletAccounts;
    private List<string> _networkList;

    private string _swapFrom = "STRAX";
    private string _swapTo = "CITY";
    private long _amountToSell = 1;
    private long _amountToBuy = 10;
    

    private async Task Fetch()
    {
        try
        {
            _swaps = await Http.GetFromJsonAsync<List<SwapSession>>("api/SwapCoordinator");
        }
        catch (Exception ex)
        {
            await ShowErrorMessage(ex, Defaults.Classes.Position.BottomEnd, Severity.Error);
        }
    }

    private async Task ShowErrorMessage(Exception ex, string position, Severity severity)
    {
        await SnackbarService.ShowMessage(ex.Message, position, severity);
    }

    protected override async Task OnInitializedAsync()
    {
        SetNetworkList();
        await CheckWalletAndFetch();
    }

    private void SetNetworkList()
    {
        _networkList = SwapsConfiguration.Networks.Keys.ToList();
    }

    private async Task CheckWalletAndFetch()
    {
        if (!await WalletConnector.HasBlockcoreWallet())
        {
            _hasWallet = false;
            return;
        }

        _hasWallet = true;
        _walletAccounts = Storage.GetOrCreate<WalletAccounts>();
        await Fetch();
    }

    private void ViewSwap(string session)
    {
        NavigationManager.NavigateTo($"viewswap/{session}");
    }
}
 