@page "/myswaps"

@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using NBitcoin.Crypto
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Client.Services
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<MySwaps> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IBlockchainApiService BlockchainApiService

<PageTitle>My Swaps</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h4">My Swaps</MudText>
<MudText Align="Align.Center" Class="mb-8 mt-8">This component helps find available swaps.</MudText>


@if (hasWallet == false)
{
	<MudAlert Severity="Severity.Normal" Class="mt-3 mb-3">Not wallet found please install the wallet at blockcore.net</MudAlert>
}
   

@if (myswaps != null)
{
	<MudTable Items="@myswaps" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
		<HeaderContent>
			<MudTh>From</MudTh>
			<MudTh>To</MudTh>
			<MudTh>Date</MudTh>
			<MudTh>Is Mine</MudTh>
			<MudTh>Status</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
			<RowTemplate>
				<MudTd Class="text-one-line" DataLabel="Seller">@Money.Satoshis(context.CoinSeller.Amount) - @context.CoinSeller.CoinSymbol</MudTd>
				<MudTd Class="text-one-line" DataLabel="Buyer">@Money.Satoshis(context.CoinBuyer.Amount) - @context.CoinBuyer.CoinSymbol</MudTd>
				<MudTd Class="text-one-line" DataLabel="Date">@context.Created </MudTd>
				<MudTd Class="text-one-line" DataLabel="Is Mine">@(_walletAccounts.HasAccountKey(context.CoinSeller.SenderPubkey) ? "I am seller" : _walletAccounts.HasAccountKey(context.CoinBuyer.SenderPubkey) ? "I am buyer" : "not my swap")</MudTd>
					<MudTd Class="text-one-line" DataLabel="Status">@context.Status </MudTd>
					<MudTd DataLabel="Details">
						<MudButton Color="Color.Info" Variant="Variant.Filled" @onclick="() => this.ViewSwap(context.SwapSessionId)">Details</MudButton>
					</MudTd>
				</RowTemplate>
	</MudTable>
}

@code {
	private IEnumerable<SwapSession> myswaps = new List<SwapSession>();
	private bool _loading;

	Networks.Network network;
	List<string> NetworkList;
	private bool hasWallet;

	string error;

	string SwapFrom = "STRAX";
	string SwapTo = "CITY";

	long amountToSell = 1;
	long amountToBuy = 10;
	WalletAccounts? _walletAccounts;

	private async Task Fetch()
	{
		myswaps = storage.GetSwaps();

	    if (myswaps != null)
	    {
	        foreach (var myswap in myswaps.ToList())
	        {
	            if (myswap.Status is SwapsDataStatus.Available or SwapsDataStatus.InProgress)
	            {
	                var swap = await Http.GetFromJsonAsync<SwapSession>($"api/SwapCoordinator/session/{myswap.SwapSessionId}");

	                if (myswap.Status != swap.Status)
	                {
	                    myswaps.ToList().Remove(myswap);
						myswaps.ToList().Add(swap);
						storage.SetSwaps(myswaps.ToList());
	                }
	            }
	        }
	    }
	}
	
	protected override async Task OnInitializedAsync()
	{
		NetworkList = SwapsConfiguration.Networks.Keys.ToList();

	    if (await WalletConnector.HasBlockcoreWallet() == false)
	    {
	        hasWallet = false;
	        return;
	    }

	    hasWallet = true;

	    _walletAccounts = storage.GetOrCreate<WalletAccounts>();
		
		await this.Fetch();
	}

	protected async Task ViewSwap(string session)
	{
		NavigationManager.NavigateTo($"viewswap/{session}");
	}

}
