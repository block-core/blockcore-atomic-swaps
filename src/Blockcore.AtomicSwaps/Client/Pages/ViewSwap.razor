@page "/viewswap/{swapsession}"
@using Blockcore.AtomicSwaps.Shared
@using Blockcore.AtomicSwaps.Server.Controllers
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.Features.Wallet.Helpers
@using NBitcoin
@using System.Text.Json
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.BlockcoreWallet.Exceptions
@using Blockcore.AtomicSwaps.Client.Services
@using Blockcore.Utilities
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<ViewSwap> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IBlockchainApiService BlockchainApiService;
@inject IWalletService WalletService

<PageTitle>View Swaps</PageTitle>

<h1>View Swaps</h1>

<p>This component displays a swap.</p>

<p class="alert-danger">@error</p>

@if (swap != null)
{
    @*=========================Swap info========================*@

    <h4>Session id - @swap.SwapSessionId</h4>
    <p>Created - @swap.Created</p>
    <p>Status - @swap.Status</p>

    <h4>Swap @Money.Satoshis(swap.CoinSeller.Amount) @swap.CoinSeller.CoinSymbol for @Money.Satoshis(swap.CoinBuyer.Amount) @swap.CoinBuyer.CoinSymbol</h4>

    @if (mypubkey == null){<p><strong>Not my swap</strong></p>}
    else if (swap.CoinSeller.SenderPubkey == mypubkey){<p class="text-success"><strong> I am the seller</strong></p>}
    else if (swap.CoinBuyer.SenderPubkey == mypubkey){<p class="text-success"><strong>I am the buyer</strong></p>}
    else{<p><strong>Not my swap</strong></p>}

    <button class="btn btn-primary" @onclick="RefreshSwap">Refresh Swap</button>

    @if (swap.CoinSeller.SwapTransactionHash != null || swap.CoinBuyer.SwapTransactionHash != null)
    {
        <button class="btn btn-primary ms-2" @onclick="RefreshConfirmations">Refresh confirmations</button>
    }
    <hr/>

    @*=========================Step1 - swap created by seller ========================*@

    <h3>Step 1 - swap created by the seller</h3>

    <p>Seller Pubkey - @swap.CoinSeller.SenderPubkey</p>
    <p>Shared secret hash - @swap.SharedSecretHash</p>
    
    @if (swap.CoinSeller.SenderPubkey == mypubkey && swap.CoinBuyer.SenderPubkey == null)
    {
        <button class="btn btn-danger" @onclick="DeleteSwap">Delete Swap</button>
    }

    <hr />

    @*=========================Step2 - swap locked by buyer ========================*@

    <h3>Step 2 - swap locked by buyer</h3>
    
    <p>Buyer Pubkey - @swap.CoinBuyer.SenderPubkey</p>

    @if (swap.CoinSeller.SenderPubkey != mypubkey && swap.CoinBuyer.SenderPubkey == null)
    {
        if (hasWallet)
        {
            if (_walletAccounts.Connected)
            {
                <button class="btn btn-success" @onclick="BuyerTakeSwap">Claim This Swap</button>
            }
            else
            {
                <p><a href="/walletconnect">Connect a wallet to participate in this swap </a></p>
            }
        }
        else
        {
            <p>Not wallet found please install the wallet at blockcore.net to participate in this swap</p>
        }
    }

    <hr />

    @*=========================Step3 - seller creates swap trx ========================*@

    <h3>Step3 - seller swaps</h3>

    @if (swap.CoinSeller.SwapTransactionHash != null)
    {
        <p>seller swap chain @swap.CoinSeller.CoinSymbol trx id -  @swap.CoinSeller.SwapTransactionHash</p>
        <p>seller swap trx confirmations - @SellerSwapTransactionConfirmations</p>
        @if (swap.CoinSeller.RecoveryLockTime.HasValue)
        {
            <p>InProgress until : @swap.CoinSeller.RecoveryLockTime?.ToString("dd/MM/yyyy HH:mm:ss") (@((swap.CoinSeller.RecoveryLockTime - DateTime.UtcNow)?.TotalHours.ToString("F")) hours left)</p>
        }

        <p>Swap address:</p>
        <div class="alert alert-secondary" role="alert">
            @swap.CoinSeller.SwapAddress
        </div>

        <p>ScriptHash :</p>
        <div class="alert alert-info" role="alert">
            @Script.FromHex(@swap.CoinSeller.SwapRedeemScriptHex).ToString()
        </div>
    }

    @if (swap.CoinSeller.SenderPubkey == mypubkey)
    {
        @if (swap.CoinBuyer.SenderPubkey != null && swap.CoinSeller.SwapTransactionHash == null)
        {
            <button class="btn btn-info" @onclick="BuildSellerSwap">Build Seller Swap Transaction</button>
        }
    }

    <hr />

    @*=========================Step4 - buyer creates swap trx ========================*@

    <h3>Step4 - buyer swaps</h3>

    @if (swap.CoinBuyer.SwapTransactionHash != null)
    {
        <p>buyer swap chain @swap.CoinBuyer.CoinSymbol trx id - @swap.CoinBuyer.SwapTransactionHash</p>
        <p>buyer swap trx id confirmations : @BuyerSwapTransactionConfirmations</p>  
        @if (swap.CoinBuyer.RecoveryLockTime.HasValue)
        {
            <p>InProgress until : @swap.CoinBuyer.RecoveryLockTime?.ToString("dd/MM/yyyy HH:mm:ss") (@((swap.CoinBuyer.RecoveryLockTime - DateTime.UtcNow)?.TotalHours.ToString("F")) hours left)</p>
        }    

        <p>Swap address:</p>
        <div class="alert alert-secondary" role="alert">
            @swap.CoinBuyer.SwapAddress
        </div>

        <p>ScriptHash :</p>
        <div class="alert alert-info" role="alert">
            @Script.FromHex(@swap.CoinBuyer.SwapRedeemScriptHex).ToString()
        </div>
    }

    @if (swap.CoinBuyer.SenderPubkey == mypubkey)
    {
        @if (swap.CoinSeller.SwapTransactionHash != null)
        {
            @if (SellerSwapTransactionConfirmations > 0 && swap.CoinBuyer.SwapTransactionHash == null)
            {
                <button class="btn btn-info" @onclick="BuildBuyerSwap">Build Buyer Swap Transaction</button>
            }
        }
    }

    <hr />

    @*=========================Step5 - seller creates exchange trx (reveal secret) ========================*@

    <h3>Step5 - seller claims coins (reveal secret)</h3>

    @if (@swap.CoinBuyer.ExchangeTransactionHash != null)
    {
        <p>Seller Exchange chain @swap.CoinBuyer.CoinSymbol trx id - @swap.CoinBuyer.ExchangeTransactionHash</p>
        <p>Seller Exchange trx Confirmations : @SellerExchangeTransactionConfirmations</p>

        <P class="text-success"><strong>SELLER EXCHANGE SUCCESS</strong></P>
    }

    @if (swap.CoinSeller.SenderPubkey == mypubkey)
    {
        if (BuyerSwapTransactionConfirmations > 0 && swap.CoinBuyer.SwapTransactionHash != null &&
            SellerSwapTransactionConfirmations > 0 && swap.CoinSeller.SwapTransactionHash != null)
        {
            if (swap.CoinBuyer.ExchangeTransactionHash == null)
            {
                <button class="btn btn-success" @onclick="SellerExchangeFunds">Claim Seller Coins</button>
            }
        }
    }

    <hr />

    @*=========================Step6 - buyer creates exchange trx (discover secret) ========================*@

    <h3>Step6 - buyer claims coins (discover secret)</h3>

    @if (swap.CoinSeller.ExchangeTransactionHash != null)
    {
        <p>Buyer Exchange chain @swap.CoinSeller.CoinSymbol trx id - @swap.CoinSeller.ExchangeTransactionHash</p>
        <p>Buyer Exchange trx Confirmations : @BuyerExchangeTransactionConfirmations</p>

        <P class="text-success"><strong>BUYER EXCHANGE SUCCESS</strong></P>
    }
    
    @if (swap.CoinBuyer.SenderPubkey == mypubkey)
    {
        @if (BuyerSwapTransactionConfirmations > 0 && swap.CoinBuyer.SwapTransactionHash != null &&
            SellerSwapTransactionConfirmations > 0 && swap.CoinSeller.SwapTransactionHash != null)
        {
            @if (swap.CoinSeller.ExchangeTransactionHex == null)
            {
                if (string.IsNullOrEmpty(SharedSecret))
                {
                    <button class="btn btn-warning" @onclick="ScanForSecretHash">Check the Blockchain for the secret hash</button>
                }
                else
                {
                    <button class="btn btn-success" @onclick="BuyerExchangeFunds">Claim Buyer Swap Transaction</button>
                }
            }
        }
    }
    <hr />

    @*=========================Step7 - buyer claims recover trx (timeout) ========================*@

    <h3>Step7 - buyer claims recover trx (timeout)</h3>

    @if (swap.CoinBuyer.SenderPubkey == mypubkey)
    {
        if (swap.CoinBuyer.SwapTransactionHash != null && swap.CoinBuyer.RecoveryLockTime < DateTime.UtcNow)
        {
            <button class="btn btn-danger" @onclick="BuyerRecoverFunds">Recover Buyer Funds</button>
        }
    }

    <hr />

    @*=========================Step8 - seller claims recover trx (timeout) ========================*@

    <h3>Step8 - seller claims recover trx (timeout)</h3>
    
    @if (swap.CoinSeller.SenderPubkey == mypubkey)
    {
        if (swap.CoinSeller.SwapTransactionHash != null && swap.CoinSeller.RecoveryLockTime < DateTime.UtcNow)
        {
            <button class="btn btn-danger" @onclick="SellerRecoverFunds">Recover Seller Funds</button>
        }
    }

    <hr />
}

@code {
    private SwapSession? swap;

    string error;

    [Parameter]
    public string swapSession { get; set; }

    string SharedSecret { get; set; }

    string mypubkey;

    int SellerSwapTransactionConfirmations;
    int BuyerSwapTransactionConfirmations;
    int SellerExchangeTransactionConfirmations;
    int BuyerExchangeTransactionConfirmations;
    int SellerRecoveryTransactionConfirmations;
    int BuyerRecoveryTransactionConfirmations;
   
    WalletAccounts _walletAccounts = new();

    private bool hasWallet;
    List<string> NetworkList;

    protected override async Task OnInitializedAsync()
    {
        hasWallet = await WalletConnector.HasBlockcoreWallet();
        _walletAccounts = storage.GetOrCreate<WalletAccounts>();
        NetworkList = SwapsConfiguration.Networks.Keys.ToList();

        string? swapRes = await Http.GetStringAsync($"api/SwapCoordinator/session/{swapSession}");

        if (string.IsNullOrEmpty(swapRes))
        {
            error = $"Swap not found!";
            return;
        }

        swap = JsonSerializer.Deserialize<SwapSession>(swapRes, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        });

        if (swap?.CoinSeller?.SenderPubkey != null && _walletAccounts.HasAccountKey(swap.CoinSeller.SenderPubkey))
            mypubkey = swap.CoinSeller.SenderPubkey;

        if (swap?.CoinBuyer?.SenderPubkey != null && _walletAccounts.HasAccountKey(swap.CoinBuyer.SenderPubkey))
            mypubkey = swap.CoinBuyer.SenderPubkey;
            
        await this.RefreshConfirmations();
    }

    private async Task DeleteSwap()
    {
        // this method is of course problematic because anyone can delete using an api call
        // we need to add pubkey validation to each request to the api

        if (swap.CoinSeller.SenderPubkey == mypubkey || swap.CoinBuyer.SenderPubkey == mypubkey)
        {
            await Http.DeleteAsync($"api/SwapCoordinator/delete/{swapSession}");
        }
        else
        {
            error = "Only the owner can delete a swap";
            return;
        }

        var swaps = storage.GetSwaps();
        if (swaps != null)
        {
            var myswap = swaps.FirstOrDefault(s => s.SwapSessionId == swapSession);
            if (myswap != null)
            {
                swaps.Remove(myswap);
                storage.SetSwaps(swaps);
            }
        }

        NavigationManager.NavigateTo($"/");
    }

    private async Task BuyerTakeSwap()
    {
        ExtKey.UseBCForHMACSHA512 = true;
        NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

        Networks.Network network = SwapsConfiguration.Networks[swap.CoinBuyer.CoinSymbol];
        var account = _walletAccounts.GetAccount(network.CoinTicker);

        mypubkey = account.Pubkey;

        swap.Status = SwapsDataStatus.InProgress;
        swap.CoinBuyer.SenderPubkey = mypubkey;
        swap.CoinSeller.ReceiverPubkey = mypubkey;

        var myswaps = storage.GetSwaps();

        if (myswaps == null)
        {
            myswaps = new List<SwapSession>();
            storage.SetSwaps(myswaps);
        }

        await Http.PostAsJsonAsync($"api/SwapCoordinator/update", swap);

        myswaps.Add(swap);
        storage.SetSwaps(myswaps);
    }
    
    private async Task BuildSellerSwap()
    {
        if (swap.CoinSeller.SenderPubkey != mypubkey)
            throw new Exception("seller pubkey was changed");

        BuildSideSwap(swap.CoinSeller, DateTime.UtcNow.AddHours(48));

        await PostSwap(swap);

        await this.RefreshSwap();

        await this.BlockchainApiService.Broadcast(swap.CoinSeller.CoinSymbol, swap.CoinSeller.SwapTransactionHex);
    }

    private async Task BuildBuyerSwap()
    {
        if (swap.CoinBuyer.SenderPubkey != mypubkey)
            throw new Exception("buyer pubkey was changed");

        await BuildSideSwap(swap.CoinBuyer, swap.CoinSeller.RecoveryLockTime.Value.AddHours(-24));

        await PostSwap(swap);

        await this.RefreshSwap();

        await this.BlockchainApiService.Broadcast(swap.CoinBuyer.CoinSymbol, swap.CoinBuyer.SwapTransactionHex);
    }

    private async Task BuildSideSwap(SwapSessionCoin swapSessionCoin, DateTime recoveryLockTime)
    {
        ExtKey.UseBCForHMACSHA512 = true;
        NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

        Networks.Network network = SwapsConfiguration.Networks[swapSessionCoin.CoinSymbol];

        swapSessionCoin.RecoveryLockTime = recoveryLockTime;

        // refresh the account balances
        var walletConnectInput = new WalletConnectInput { WalletAccounts = _walletAccounts };
        var errorRes = await WalletService.ConnectWallet(walletConnectInput);
        errorRes.ThorwIfError();

        var account = _walletAccounts.GetAccount(network.CoinTicker);
        var walletAccount = walletConnectInput.WalletApiMessage.content.accounts.First(a => a.networkType == network.CoinTicker);

        var fee = network.MinRelayTxFee * 3;
        if (!SwapsConfiguration.FindInputs(network, storage, swapSessionCoin.Amount, fee, out List<UtxoData> balancesList))
        {
            error = "not enough balance";
            return;
        }

        var utxos = SwapsConfiguration.AddPrivateKeys(network, storage, balancesList);
        
        PubKey pubKey = SwapsConfiguration.GetNextAvailableAddress(network, storage);

        //RedeemType redeemType = HdOperations.GetPurpose(accountInfo.Path) == 44 ? RedeemType.P2SH :
        //    HdOperations.GetPurpose(accountInfo.Path) == 88 ? RedeemType.WitnessV0 : RedeemType.P2SH;

        RedeemType redeemType = walletAccount.purpose == 44 ? RedeemType.P2SH :
            walletAccount.purpose == 88 ? RedeemType.WitnessV0 : RedeemType.P2SH;

        var change = redeemType == RedeemType.P2SH ? 
            pubKey.GetAddress(network).ScriptPubKey : 
            pubKey.GetSegwitAddress(network).ScriptPubKey;

        var transactionContext = SwapBuilder.CreateSwapTransaction(network,
            uint160.Parse(swap.SharedSecretHash),
            new PubKey(swapSessionCoin.SenderPubkey),
            change,
            new PubKey(swapSessionCoin.ReceiverPubkey),
            swapSessionCoin.RecoveryLockTime.Value, 
            swapSessionCoin.Amount, 
            utxos, 
            new FeeRate(new Money(fee)),
            redeemType);

        swapSessionCoin.SwapTransactionHex = transactionContext.Transaction.ToHex(network.Consensus.ConsensusFactory);
        swapSessionCoin.SwapTransactionHash = transactionContext.Transaction.GetHash().ToString();
        swapSessionCoin.SwapRedeemScriptHex = transactionContext.RedeemScript.ToHex();
        swapSessionCoin.SwapAddress = transactionContext.SwapAddress;
    }

    private async Task RefreshSwap()
    {
        swap = await Http.GetFromJsonAsync<SwapSession>($"api/SwapCoordinator/session/{swapSession}");

        var myswaps = storage.GetSwaps();
        if (myswaps != null)
        {
            var swapStore = myswaps.FirstOrDefault(s => s.SwapSessionId == swap.SwapSessionId);
            if (swapStore != null)
            {
                myswaps.Remove(swapStore);
                myswaps.Add(swap);
                storage.SetSwaps(myswaps);
            }
        }
    }

    private async Task PostSwap(SwapSession swap)
    {
        await Http.PostAsJsonAsync($"api/SwapCoordinator/update", swap);

        var myswaps = storage.GetSwaps();
        var swapStore = myswaps.FirstOrDefault(s => s.SwapSessionId == swap.SwapSessionId);
        if (swapStore != null)
        {
            myswaps.Remove(swapStore);
            myswaps.Add(swap);
            storage.SetSwaps(myswaps);
        }
    }

    private async Task RefreshConfirmations()
    {
        if (swap?.CoinSeller.SwapTransactionHash != null)
        {
            SellerSwapTransactionConfirmations = await BlockchainApiService.GetConfirmationsAsync(
                swap.CoinSeller.CoinSymbol, 
                swap.CoinSeller.SwapTransactionHash, 
                swap.CoinSeller.SwapTransactionHex);
        }

        if (swap?.CoinBuyer.SwapTransactionHash != null)
        {
            BuyerSwapTransactionConfirmations = await BlockchainApiService.GetConfirmationsAsync(
                swap.CoinBuyer.CoinSymbol,
                swap.CoinBuyer.SwapTransactionHash,
                swap?.CoinBuyer.SwapTransactionHex);
        }

        if (swap?.CoinBuyer.ExchangeTransactionHex != null)
        {
            SellerExchangeTransactionConfirmations = await BlockchainApiService.GetConfirmationsAsync(
                swap.CoinBuyer.CoinSymbol,
                swap.CoinBuyer.ExchangeTransactionHash,
                swap?.CoinBuyer.ExchangeTransactionHex);
        }

        if (swap?.CoinSeller.ExchangeTransactionHex != null)
        {
            BuyerExchangeTransactionConfirmations = await BlockchainApiService.GetConfirmationsAsync(
                swap.CoinSeller.CoinSymbol,
                swap.CoinSeller.ExchangeTransactionHash,
                swap?.CoinSeller.ExchangeTransactionHex);
        }
    }

    private async Task SellerExchangeFunds()
    {
        ExtKey.UseBCForHMACSHA512 = true;
        NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

        if (swap.CoinBuyer.ReceiverPubkey != mypubkey)
            throw new Exception("seller pubkey was changed");

        Networks.Network network = SwapsConfiguration.Networks[swap.CoinBuyer.CoinSymbol];

        var res = await WalletConnector.SignMessageAnyAccount(swap.SwapSessionId);
        var data = JsonSerializer.Deserialize<WalletApiMessage<string>>(res);

        var sharedSecret = SwapsConfiguration.GenerateSecret(data.signature, swap.SwapSessionId);
        var extendedKey = ExtKey.Parse(storage.GetWalletPrivkey(), network);

        ExchangeSwapFund(swap.CoinBuyer, sharedSecret, extendedKey.PrivateKey);

        await PostSwap(swap);

        await this.RefreshSwap();

        await this.BlockchainApiService.Broadcast(swap.CoinBuyer.CoinSymbol, swap.CoinBuyer.ExchangeTransactionHex);
    }

    private async Task BuyerExchangeFunds()
    {
        ExtKey.UseBCForHMACSHA512 = true;
        NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

        if (swap.CoinSeller.ReceiverPubkey != mypubkey)
            throw new Exception("buyer pubkey was changed");

        if (string.IsNullOrEmpty(this.SharedSecret))
            throw new Exception("Missing shared secret");

        var walletWrods = storage.GetWalletWords();
        var extendedKey = HdOperations.GetExtendedKey(walletWrods);

        ExchangeSwapFund(swap.CoinSeller, new uint256(this.SharedSecret), extendedKey.PrivateKey);

        swap.Status = SwapsDataStatus.Complete;

        await PostSwap(swap);

        await this.RefreshSwap();

        await this.BlockchainApiService.Broadcast(swap.CoinSeller.CoinSymbol, swap.CoinSeller.ExchangeTransactionHex);
    }

    private void ExchangeSwapFund(SwapSessionCoin swapSessionCoin, uint256 sharedSecret, Key privateKey)
    {
        // double check the keys
        if (mypubkey != swapSessionCoin.ReceiverPubkey)
            throw new Exception("Invalid key");

        Networks.Network network = SwapsConfiguration.Networks[swapSessionCoin.CoinSymbol];

        var transaciton = network.Consensus.ConsensusFactory.CreateTransaction(swapSessionCoin.SwapTransactionHex);
        var redeemScript = Script.FromHex(swapSessionCoin.SwapRedeemScriptHex);

        long fee = network.MinRelayTxFee * 3;

        PubKey pubKey = SwapsConfiguration.GetNextAvailableAddress(network, storage);

        var exchangeTransaction = SwapBuilder.CreateSwapSpendTransaction(
            network,
            transaciton,
            redeemScript,
            sharedSecret,
            pubKey.GetAddress(network).ScriptPubKey,
            privateKey,
            new FeeRate(new Money(fee)));

        swapSessionCoin.ExchangeTransactionHex = exchangeTransaction.ToHex(network.Consensus.ConsensusFactory);
        swapSessionCoin.ExchangeTransactionHash = exchangeTransaction.GetHash().ToString();
    }


    private async Task ScanForSecretHash()
    {
        Networks.Network network = SwapsConfiguration.Networks[swap.CoinBuyer.CoinSymbol];

        if (swap.CoinBuyer.ExchangeTransactionHex != null)
        {
            var transaciton = network.Consensus.ConsensusFactory.CreateTransaction(swap.CoinBuyer.ExchangeTransactionHex);

            var secret = SwapScripts.GetSecretFromScriptSig(transaciton);

            this.SharedSecret = secret.ToString();
        }

        var indexer = SwapsConfiguration.Indexers.First(f => f.Symbol == swap.CoinBuyer.CoinSymbol);
        var url = $"/query/transaction/{swap.CoinBuyer.SwapTransactionHash}";
        var res = await Http.GetFromJsonAsync<TransactionData>(indexer.Url + url);

        foreach (var output in res.outputs)
        {
            if (output.address == swap.CoinBuyer.SwapAddress)
            {
                if (!string.IsNullOrEmpty(output.spentInTransaction))
                {
                    url = $"/query/transaction/{output.spentInTransaction}/hex";
                    var trxHex = await Http.GetStringAsync(indexer.Url + url);

                    if (res != null)
                    {
                        swap.CoinBuyer.ExchangeTransactionHex = trxHex; // the other side didn't tell us they spent the coins

                        var exchangeTransaciton = network.Consensus.ConsensusFactory.CreateTransaction(trxHex);

                        var secret = SwapScripts.GetSecretFromScriptSig(exchangeTransaciton);

                        this.SharedSecret = secret.ToString();
                    }
                }
            }
        }
    }

    private async Task SellerRecoverFunds()
    {
        ExtKey.UseBCForHMACSHA512 = true;
        NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

        if (swap.CoinSeller.SenderPubkey != mypubkey)
            throw new Exception("buyer pubkey was changed");

        var walletWrods = storage.GetWalletWords();
        var extendedKey = HdOperations.GetExtendedKey(walletWrods);

        RecoverFunds(swap.CoinSeller, extendedKey.PrivateKey);

        await PostSwap(swap);

        await this.RefreshSwap();

        await this.BlockchainApiService.Broadcast(swap.CoinSeller.CoinSymbol, swap.CoinSeller.SenderRecoveryTransactionHex);
    }

    private async Task BuyerRecoverFunds()
    {
        ExtKey.UseBCForHMACSHA512 = true;
        NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

        if (swap.CoinBuyer.SenderPubkey != mypubkey)
            throw new Exception("buyer pubkey was changed");

        var walletWrods = storage.GetWalletWords();
        var extendedKey = HdOperations.GetExtendedKey(walletWrods);

        RecoverFunds(swap.CoinBuyer, extendedKey.PrivateKey);

        await PostSwap(swap);

        await this.RefreshSwap();

        await this.BlockchainApiService.Broadcast(swap.CoinBuyer.CoinSymbol, swap.CoinBuyer.SenderRecoveryTransactionHex);
    }

    private void RecoverFunds(SwapSessionCoin swapSessionCoin, Key privateKey)
    {
        if (mypubkey != swapSessionCoin.SenderPubkey)
            throw new Exception("Invalid key");

        Networks.Network network = SwapsConfiguration.Networks[swapSessionCoin.CoinSymbol];

        var transaciton = network.Consensus.ConsensusFactory.CreateTransaction(swapSessionCoin.SwapTransactionHex);
        var redeemScript = Script.FromHex(swapSessionCoin.SwapRedeemScriptHex);

        long fee = network.MinRelayTxFee * 3;

        PubKey pubKey = SwapsConfiguration.GetNextAvailableAddress(network, storage);

        var recoveryTransaction = SwapBuilder.CreateSwapRecoveryTransaction(
            network,
            transaciton,
            redeemScript,
            pubKey.GetAddress(network).ScriptPubKey,
            privateKey,
            new FeeRate(new Money(fee)),
            swapSessionCoin.RecoveryLockTime!.Value);

        swapSessionCoin.SenderRecoveryTransactionHex = recoveryTransaction.ToHex(network.Consensus.ConsensusFactory);
        swapSessionCoin.SenderRecoveryTransactionHash = recoveryTransaction.GetHash().ToString();
    }
}
