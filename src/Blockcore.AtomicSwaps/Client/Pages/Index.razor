@page "/"

@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using NBitcoin.Crypto
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<Index> Logger;

<PageTitle>Blockcore Atomic Swaps</PageTitle>

<h1>Blockcore Atomic Swaps</h1>

<MudAlert Severity="Severity.Normal">This component demonstrates swaps data from the server.</MudAlert>

@* <MudText Typo="Typo.h4">My Swaps.</MudText>

<button class="btn btn-primary" @onclick="Fetch">Fetch Swaps</button>
*@
<p class="alert-danger">@error</p>

@if (hasWallet == false)
{
    <p><strong>No Wallet Found, to start swapping coins go to the wallet tab </strong></p>
}
   

@if (myswaps != null)
{
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Swap Id</th>
				<th>Seller</th>
				<th>Buyer</th>
				<th>Date</th>
				<th>Is Mine</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var swap in myswaps)
			{
				<tr>
					<td>@swap.SwapSessionId</td>
					<td>@Money.Satoshis(swap.CoinSeller.Amount) - @swap.CoinSeller.CoinSymbol</td>
					<td>@Money.Satoshis(swap.CoinBuyer.Amount) - @swap.CoinBuyer.CoinSymbol</td>
					<td>@swap.Created </td>
					<td>@(swap.CoinSeller.SenderPubkey == mypubkey ? "I am seller" : swap.CoinBuyer.SenderPubkey == mypubkey ? "I am buyer" : "not my swap")</td>
					<td>@swap.Status </td>
					<td><button class="btn btn-info" @onclick="() => this.ViewSwap(swap.SwapSessionId)">Details</button> </td>
				</tr>
			}
        </tbody>
	</table>
}

@code {
	private List<SwapSession> myswaps;
	Networks.Network network;
	List<string> NetworkList;
    private bool hasWallet;

	string error;

	string SwapFrom = "STRAX";
	string SwapTo = "CITY";

	long amountToSell = 1;
	long amountToBuy = 10;

	string mypubkey;
	private async Task Fetch()
	{
		mypubkey = storage.GetWalletPubkey();

	    myswaps = storage.GetSwaps();

	    if (myswaps != null)
	    {
	        foreach (var myswap in myswaps.ToList())
	        {
	            if (myswap.Status is SwapsDataStatus.Available or SwapsDataStatus.InProgress)
	            {
	                var swap = await Http.GetFromJsonAsync<SwapSession>($"api/SwapCoordinator/session/{myswap.SwapSessionId}");

	                if (myswap.Status != swap.Status)
	                {
	                    myswaps.Remove(myswap);
	                    myswaps.Add(swap);
	                    storage.SetSwaps(myswaps);
	                }
	            }
	        }
	    }
	}
	
	protected override async Task OnInitializedAsync()
	{
		NetworkList = SwapsConfiguration.Networks.Keys.ToList();

	    if (storage.GetWalletWords() != null)
	    {
	        hasWallet = true;
	    }

		await this.Fetch();
	}

	protected async Task ViewSwap(string session)
	{
		NavigationManager.NavigateTo($"viewswap/{session}");
	}

}
