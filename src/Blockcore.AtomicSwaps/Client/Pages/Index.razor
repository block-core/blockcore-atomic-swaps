@page "/"

@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using NBitcoin.Crypto
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Client.Services
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<Index> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IBlockchainApiService BlockchainApiService

<PageTitle>Blockcore Atomic Swaps</PageTitle>

<h1>Blockcore Atomic Swaps</h1>

<MudAlert Severity="Severity.Normal">This component demonstrates swaps data from the server.</MudAlert>

@if (!string.IsNullOrEmpty(error))
{
	<MudAlert Class="mt-3 mb-3" Severity="Severity.Error">@error</MudAlert>
}

@if (hasWallet == false)
{
    <p><strong>No Wallet Found, to start swapping coins go to the wallet tab </strong></p>
}
   

@if (myswaps != null)
{
	<MudTable Items="@myswaps" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
		<HeaderContent>
			<MudTh>Swap Id</MudTh>
			<MudTh>Seller</MudTh>
			<MudTh>Buyer</MudTh>
			<MudTh>Date</MudTh>
			<MudTh>Is Mine</MudTh>
			<MudTh>Status</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Swap Id">@context.SwapSessionId</MudTd>
			<MudTd DataLabel="Seller">@Money.Satoshis(context.CoinSeller.Amount) - @context.CoinSeller.CoinSymbol</MudTd>
			<MudTd DataLabel="Buyer">@Money.Satoshis(context.CoinBuyer.Amount) - @context.CoinBuyer.CoinSymbol</MudTd>
			<MudTd DataLabel="Date">@context.Created </MudTd>
			<MudTd DataLabel="Is Mine">@(_walletAccounts.HasAccountKey(context.CoinSeller.SenderPubkey) ? "I am seller" : _walletAccounts.HasAccountKey(context.CoinBuyer.SenderPubkey) ? "I am buyer" : "not my swap")</MudTd>
				<MudTd DataLabel="Status">@context.Status </MudTd>
				<MudTd DataLabel="Details"><button class="btn btn-info" @onclick="() => this.ViewSwap(context.SwapSessionId)">Details</button> </MudTd>
			</RowTemplate>
	</MudTable>
}

@code {
	private IEnumerable<SwapSession> myswaps = new List<SwapSession>();
	private bool _loading;

	Networks.Network network;
	List<string> NetworkList;
	private bool hasWallet;

	string error;

	string SwapFrom = "STRAX";
	string SwapTo = "CITY";

	long amountToSell = 1;
	long amountToBuy = 10;
	WalletAccounts? _walletAccounts;

	private async Task Fetch()
	{
		myswaps = storage.GetSwaps();

	    if (myswaps != null)
	    {
	        foreach (var myswap in myswaps.ToList())
	        {
	            if (myswap.Status is SwapsDataStatus.Available or SwapsDataStatus.InProgress)
	            {
	                var swap = await Http.GetFromJsonAsync<SwapSession>($"api/SwapCoordinator/session/{myswap.SwapSessionId}");

	                if (myswap.Status != swap.Status)
	                {
	                    myswaps.ToList().Remove(myswap);
						myswaps.ToList().Add(swap);
						storage.SetSwaps(myswaps.ToList());
	                }
	            }
	        }
	    }
	}
	
	protected override async Task OnInitializedAsync()
	{
		NetworkList = SwapsConfiguration.Networks.Keys.ToList();

	    if (await WalletConnector.HasBlockcoreWallet() == false)
	    {
	        hasWallet = false;
	        return;
	    }

	    hasWallet = true;

	    _walletAccounts = storage.GetOrCreate<WalletAccounts>();
		
		await this.Fetch();
	}

	protected async Task ViewSwap(string session)
	{
		NavigationManager.NavigateTo($"viewswap/{session}");
	}

}
