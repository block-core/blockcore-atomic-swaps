@page "/walletdata"
@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using Blockcore.AtomicSwaps.Server.Controllers
@using Blockcore.Features.Wallet.Helpers
@using NBitcoin
@inject HttpClient Http
@inject Storage storage;
@inject GlobalData globalData;

<PageTitle>Wallet and balances</PageTitle>

<h1>Wallet and balances</h1>



<p>Beta app only use test wallets!!!!!</p>

<p>Wallet Words.</p>

<textarea class="form-control" rows="3" @bind="walletWrods" />
<button class="btn btn-primary mb-3 mt-3" @onclick="SaveWallet">Save Wallet</button>

<br/>
@*<select @bind="selectedNetwork"   type="text" @onchange="Callback" >*@
<p class="text-info mb-3 mt-3 fw-bold" >Select network:</p>

<select class="form-select mb-3" type="text" @onchange="Callback">
    <option value="" selected disabled>Please select</option>
    @{
        @foreach (var prp in NetworkList)
        {          
            <option value="@prp">@prp</option>
        }
    }
</select>

<button class="btn btn-primary" disabled="@busy" @onclick="Fetch">Refresh Balance</button>
<button class="btn btn-warning" @onclick="ClearAccount">Clear Balance</button>

<br/>
<p>@loadingStatus</p>
@if (localAccountInfo != null)
{
    <p> Account path @localAccountInfo.Path</p>
    <p> Total balance @Money.Satoshis(localAccountInfo.TotalBalance) @selectedNetwork</p>
    <p> Addressed scanned @scannedAcount</p>
    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Address</th>
            <th>Change</th>
            <th>Amount</th>
        </tr>
        </thead>
        <tbody>
        
        @foreach (var addressItem in localAccountInfo.UtxoItems)
        {
            foreach (var addressUtxoItem in addressItem.Value)
            {
                <tr>
                    <td>@addressUtxoItem.address</td>
                    <td>False</td>
                    <td>@Money.Satoshis(addressUtxoItem.value).ToUnit(MoneyUnit.BTC) @selectedNetwork</td>
                </tr>
            }
        }
        
        @foreach (var addressItem in localAccountInfo.UtxoChangeItems)
        {
            foreach (var addressUtxoItem in addressItem.Value)
            {
                <tr>
                    <td>@addressUtxoItem.address</td>
                    <td>True</td>
                    <td>@Money.Satoshis(addressUtxoItem.value).ToUnit(MoneyUnit.BTC) @selectedNetwork</td>
                </tr>
            }
        }

        </tbody>
    </table>
   
}

@code {
    private bool busy = false;
    private string walletWrods;
    public string link { get; set; } = string.Empty;
    public int blockheight;
    public string outputs;
    Block block;
    Networks.Network network;
    private AccountInfo? localAccountInfo;


    string loadingStatus = string.Empty;

    List<string> NetworkList;
    string selectedNetwork;
    int scannedAcount;

    private async Task Fetch()
    {
        if (busy) return;
        busy = true;
        try
        {
            ExtKey.UseBCForHMACSHA512 = true;
            NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;
            scannedAcount = 0;
            localAccountInfo = null;

            loadingStatus = "Loading key...";
            StateHasChanged();
            await Task.Delay(1);

            Networks.Network network = globalData.Networks[selectedNetwork];
            var coinType = network.Consensus.CoinType;
            var accountIndex = 0; // for now only account 0
            var purpose = 44; // for now only legacy

            var indexer = globalData.Indexers.First(f => f.Symbol == selectedNetwork);

            AccountInfo accountInfo = storage.GetAccountInfo(selectedNetwork);

            if (accountInfo == null)
            {
                accountInfo = new AccountInfo();

                ExtKey extendedKey;
                try
                {
                    extendedKey = HdOperations.GetExtendedKey(walletWrods);
                }
                catch (NotSupportedException ex)
                {
                    Console.WriteLine("Exception occurred: {0}", ex.ToString());

                    if (ex.Message == "Unknown")
                        throw new Exception("Please make sure you enter valid mnemonic words.");

                    throw;
                }

                loadingStatus = "Deriving keys...";
                StateHasChanged();
                await Task.Delay(1);

                string accountHdPath = HdOperations.GetAccountHdPath(purpose, coinType, accountIndex);
                Key privateKey = extendedKey.PrivateKey;
                storage.SetWalletPubkey(privateKey.PubKey.ToHex());
                ExtPubKey accountExtPubKeyTostore = HdOperations.GetExtendedPublicKey(privateKey, extendedKey.ChainCode, accountHdPath);

                accountInfo.ExtPubKey = accountExtPubKeyTostore.ToString(network);
                accountInfo.Path = accountHdPath;
            }

            localAccountInfo = accountInfo;

            loadingStatus = "Checking Addresses...";
            StateHasChanged();
            await Task.Delay(1);

            await this.CheckExistingAddresses(indexer, localAccountInfo);

            ExtPubKey accountExtPubKey = ExtPubKey.Parse(accountInfo.ExtPubKey, network);

            loadingStatus = "Fetching Addresses...";
            StateHasChanged();
            await Task.Delay(1);


            var scanIndex = accountInfo.LastFetchIndex;
            var gap = 5;
            while (gap > 0)
            {
                scannedAcount += 1;
                PubKey pubkey = HdOperations.GeneratePublicKey(accountExtPubKey, scanIndex, false);
                scanIndex++;
                var adddress = pubkey.GetAddress(network).ToString();
                var path = HdOperations.CreateHdPath(purpose, coinType, accountIndex, false, scanIndex);
                var result = await FetchUtxos(indexer, adddress);
                foreach (var utxoData in result.data) utxoData.HdPath = path;
                accountInfo.UtxoItems.Remove(adddress);
                accountInfo.UtxoItems.Add(adddress, result.data);
                accountInfo.TotalBalance += result.data.Sum(s => s.value);

                if (result.noHistory)
                {
                    gap--;
                    continue;
                }

                accountInfo.LastFetchIndex = scanIndex;
                StateHasChanged();
                await Task.Delay(1);
            }

            scanIndex = accountInfo.LastFetchChangeIndex;
            gap = 5;
            while (gap > 0)
            {
                scannedAcount += 1;
                PubKey pubkeyChange = HdOperations.GeneratePublicKey(accountExtPubKey, scanIndex, true);
                scanIndex++;
                var adddressChange = pubkeyChange.GetAddress(network).ToString();
                var path = HdOperations.CreateHdPath(purpose, coinType, accountIndex, true, scanIndex);
                var resulChange = await FetchUtxos(indexer, adddressChange);
                foreach (var utxoData in resulChange.data) utxoData.HdPath = path;
                accountInfo.UtxoChangeItems.Remove(adddressChange);
                accountInfo.UtxoChangeItems.Add(adddressChange, resulChange.data);
                accountInfo.TotalBalance += resulChange.data.Sum(s => s.value);

                if (resulChange.noHistory)
                {
                    gap--;
                    continue;
                }

                accountInfo.LastFetchChangeIndex = scanIndex;
                StateHasChanged();
                await Task.Delay(1);
            }


            accountInfo.TotalBalance = accountInfo.UtxoItems.SelectMany(s => s.Value).Sum(s => s.value) 
                                       + accountInfo.UtxoChangeItems.SelectMany(s => s.Value).Sum(s => s.value);

            storage.SetAccountInfo(selectedNetwork, accountInfo);

            loadingStatus = string.Empty;
        }
        finally
        {
            busy = false;
        }

    }

    private async Task CheckExistingAddresses(IndexerUrl indexer, AccountInfo accountInfo)
    {
        foreach (var item in accountInfo.UtxoItems)
        {
            if (item.Value.Any())
            {
                var result = await FetchUtxos(indexer, item.Key);

                if (result.data.Count == item.Value.Count)
                {
                    for (int i = 0; i < result.data.Count - 1; i++)
                    {
                        if (result.data[i].outpoint.transactionId != item.Value[i].outpoint.transactionId)
                        {
                            item.Value.Clear();
                            item.Value.AddRange(result.data);
                            break;
                        }

                    }
                }
                else
                {
                    item.Value.Clear();
                    item.Value.AddRange(result.data);
                }
            }
        }

        foreach (var item in accountInfo.UtxoChangeItems)
        {
            if (item.Value.Any())
            {
                var result = await FetchUtxos(indexer, item.Key);

                if (result.data.Count == item.Value.Count)
                {
                    for (int i = 0; i < result.data.Count - 1; i++)
                    {
                        if (result.data[i].outpoint.transactionId != item.Value[i].outpoint.transactionId)
                        {
                            item.Value.Clear();
                            item.Value.AddRange(result.data);
                            break;
                        }

                    }
                }
                else
                {
                    item.Value.Clear();
                    item.Value.AddRange(result.data);
                }
            }
        }
    }

    private async Task<(bool noHistory, List<UtxoData> data)> FetchUtxos(IndexerUrl indexer, string adddress)
    {
        var limit = 10;
        var offset = 0;
        List<UtxoData> allItems = new();

        var urlBalance = $"/query/address/{adddress}";
        var addressBalance = await Http.GetFromJsonAsync<AddressBalance>(indexer.Url + urlBalance);

        if (addressBalance?.balance == 0 && (addressBalance.totalReceivedCount + addressBalance.totalSentCount) == 0)
        {
            return (true, allItems);
        }

        int fetchCount = 10; // for the demo we just scan 50 addresses

        for (int i = 0; i < fetchCount; i++)
        {
            // this is inefficient look at headers to know when to stop

            var url = $"/query/address/{adddress}/transactions/unspent?confirmations=0&offset={offset}&limit={limit}";

            Console.WriteLine($"fetching {url}");

            var response = await Http.GetAsync(indexer.Url + url);
            var utxo = await response.Content.ReadFromJsonAsync<List<UtxoData>>();

            if (utxo == null || !utxo.Any())
                break;

            allItems.AddRange(utxo);

            offset += limit;
        }

        return (false, allItems);
    }

    private async Task SaveWallet()
    {
        storage.SaveWalletWords(walletWrods);
    }

    private async Task ClearAccount()
    {
        var account = storage.GetAccountInfo(selectedNetwork);
        account.TotalBalance = 0;
        account.LastFetchChangeIndex = 0;
        account.LastFetchIndex = 0;
        account.UtxoItems.Clear();
        account.UtxoChangeItems.Clear();
        storage.SetAccountInfo(selectedNetwork,  account);
        localAccountInfo = account;
    }

    protected override async Task OnInitializedAsync()
    {
        walletWrods = storage.GetWalletWords();
        NetworkList = globalData.Networks.Keys.ToList();
    }

    private void Callback(ChangeEventArgs obj)
    {
        selectedNetwork = obj.Value.ToString();

        var accountInfo = storage.GetAccountInfo(selectedNetwork);
        scannedAcount = 0;
        if (accountInfo != null)
        {
            this.localAccountInfo = accountInfo;
        }
        else
        {
            this.localAccountInfo = null;
        }

        Console.WriteLine($"Account info balance {this.localAccountInfo?.TotalBalance ?? 0}");

    }

}
