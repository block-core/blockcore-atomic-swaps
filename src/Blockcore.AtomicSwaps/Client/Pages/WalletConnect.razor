@page "/walletconnect"
@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.Client.Services

@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject ILogger<WalletConnect> Logger;
@inject IBlockcoreWalletConnector WalletConnector
@inject IWalletService WalletService

<PageTitle>Wallet and balances</PageTitle>

<h1>Connected Wallets</h1>

@if (!hasWallet)
{
    <p>Not wallet found please install the wallet at blockcore.net</p>
}
else
{
    @if (!string.IsNullOrEmpty(error))
    {
        <MudAlert Class="mt-3 mb-3" Severity="Severity.Error">@error</MudAlert>
    }

    <button class="btn btn-primary  mb-3 mt-3" disabled="@busy" @onclick="ConnectWallet">@(_walletAccounts.Connected ? "Refresh" : "Connect")</button>

    @if (_walletAccounts.Connected)
    {
        <p>Wallet key - @_walletAccounts.WalletPubKey</p>


        <MudTable Items="@_walletAccounts.Accounts" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Coin</MudTh>
                <MudTh>Pubkey</MudTh>
                <MudTh>Balance</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Coin">@context.Value.CoinSymbol</MudTd>
                <MudTd DataLabel="Pubkey">@context.Value.Pubkey</MudTd>
                <MudTd DataLabel="Balance">@Money.Satoshis(context.Value.Balance).ToUnit(MoneyUnit.BTC) @context.Value.CoinSymbol</MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <p>Please add accounts</p>
    }
}

<br/>
<p>@loadingStatus</p>

@code {
    private bool _loading;
    private WalletAccounts _walletAccounts = new WalletAccounts();

    private bool busy = false;
    private bool hasWallet;
    string error;

    string loadingStatus = string.Empty;

    List<string> _networkList = new();

    protected override async Task OnInitializedAsync()
    {
        hasWallet = await WalletConnector.HasBlockcoreWallet();
        _networkList = SwapsConfiguration.Networks.Keys.ToList();
        _walletAccounts = storage.GetOrCreate<WalletAccounts>();
    }

    private async Task ConnectWallet()
    {
        error = await WalletService.ConnectWallet(_walletAccounts);
    }
}
