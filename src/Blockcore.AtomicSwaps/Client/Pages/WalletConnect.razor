@page "/walletconnect"
@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using Blockcore.AtomicSwaps.BlockcoreWallet
@using Blockcore.AtomicSwaps.BlockcoreWallet.Exceptions
@using Blockcore.Utilities
@using System.Text.Json
@using Blockcore.AtomicSwaps.Client.Services

@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject ILogger<WalletData> Logger;
@inject IBlockcoreWalletService WalletService
@inject IBlockchainApiService BlockchainApiService

<PageTitle>Wallet and balances</PageTitle>

<h1>Connected Wallets</h1>

@if (!hasWallet)
{
    <p>Not wallet found please install the wallet at blockcore.net</p>
}
else
{
    <p class="alert-danger">@error</p>

    <button class="btn btn-primary  mb-3 mt-3" disabled="@busy" @onclick="ConnectWallet">@(_walletAccounts.Connected ? "Refresh" : "Connect")</button>

    @if (_walletAccounts.Connected)
    {
        <p>Wallet key - @_walletAccounts.WalletPubKey</p>

        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Coin</th>
                <th>Pubkey</th>
                <th>Balance</th>
            </tr>
            </thead>
            <tbody>

                @foreach (var walletAccount in _walletAccounts.Accounts)
            {
                <tr>
                    <td>@walletAccount.Value.CoinSymbol</td>
                    <td>@walletAccount.Value.Pubkey</td>
                    <td>@Money.Satoshis(walletAccount.Value.Balance).ToUnit(MoneyUnit.BTC) @walletAccount.Value.CoinSymbol</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>Please add accounts</p>
    }
}

<br/>
<p>@loadingStatus</p>

@code {
    private bool busy = false;
    private bool hasWallet;
    string error;

    string loadingStatus = string.Empty;

    WalletAccounts _walletAccounts = new();
    List<string> _networkList = new();

    protected override async Task OnInitializedAsync()
    {
        hasWallet = await WalletService.HasBlockcoreWallet();
        _networkList = SwapsConfiguration.Networks.Keys.ToList();
        _walletAccounts = storage.GetOrCreate<WalletAccounts>();
    }

    private async Task ConnectWallet()
    {
        try
        {
            var res = await WalletService.GetWallet();
            Logger.LogInformation(res);

            var walletApiMessage = JsonSerializer.Deserialize<WalletApiMessage?>(res);

            if (walletApiMessage == null)
            {
                error = $"Failed to read wallet data";
                return;
            }

            if (_walletAccounts.Connected)
            {
                if (_walletAccounts.WalletPubKey != walletApiMessage.key)
                {
                    error = $"Incorrect wallet, expected {_walletAccounts.WalletPubKey} but got {walletApiMessage.key}";
                    return;
                }
            }
            else
            {
                _walletAccounts.WalletPubKey = walletApiMessage.key;
            }

            foreach (var walletAccount in walletApiMessage.response.accounts)
            {
                if (_walletAccounts.Accounts.TryGetValue(walletAccount.networkType, out WalletAccount account))
                {
                    // refresh the balance
                    account.Balance = walletAccount.history.balance;
                }
                else
                {
                    // based on BCIP2 and BCIP3 "m / purpose' / coin_type' / account' / swap_key' / secret"
                    // the wallet key already derives ""m / purpose'" so we derive eh account key next
                    var keysRes = await WalletService.DeriveSwapKey(walletApiMessage.key, walletApiMessage.response.wallet.id, walletAccount.id, false);
                    var keys = JsonSerializer.Deserialize<WalletApiMessage<WalletApiMessageKeys>>(keysRes);

                    WalletAccount newAccount = new WalletAccount
                    {
                        Pubkey = keys.response.publicKey,
                        CoinSymbol = walletAccount.networkType,
                        WalletId = walletApiMessage.response.wallet.id,
                        AccountId = walletAccount.id,
                        Balance = walletAccount.history.balance,
                    };

                    _walletAccounts.Accounts.Add(newAccount.CoinSymbol, newAccount);
                }
            }

             storage.Set<WalletAccounts>(_walletAccounts);
        }
        catch (NoBlockcoreWalletException nbwe)
        {
            error = "Not wallet found please install the wallet at blockcore.net";
            return;
        }
        catch (Exception e)
        {
            error = e.Message;
            Console.WriteLine(e);
        }
    }
}
