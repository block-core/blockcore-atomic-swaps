@page "/fetchswaps"
@using Blockcore.AtomicSwaps.Shared
@using Blockcore.Consensus.BlockInfo
@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using NBitcoin.Crypto
@inject HttpClient Http
@inject Storage storage;
@inject GlobalData globalData;
@inject NavigationManager NavigationManager;
@inject ILogger<FetchSwaps> Logger;

<PageTitle>Fetch Swaps</PageTitle>

<h1>Fetch Swaps</h1>



<p>This component demonstrates swaps data from the server.</p>

<p>Swap.</p>



<div class="row g-3 align-items-center mb-2">
	<div class="col-2">
		<label for="SwapFrom" class="col-form-label">From</label>
	</div>
	<div class="col-4">
		<select class="form-select" @bind="SwapFrom" type="text">
			<option value="" selected disabled>Please select</option>
			@{
				@foreach (var prp in NetworkList)
				{
					<option value="@prp">@prp</option>
				}
			}
		</select>
	</div>
	<div class="col-auto">
		<span class="form-text">
			seller
		</span>
	</div>
</div>


<div class="row g-3 align-items-center mb-2 mt-2">
	<div class="col-2">
		<label for="Amount" class="col-form-label">Amount</label>
	</div>
	<div class="col-4">
		<input class="form-control" @bind="amountToSell" />
	</div>
	<div class="col-auto">
		<span  class="form-text">
			@SwapFrom
		</span>
	</div>
</div>

<hr />



<div class="row g-3 align-items-center mb-2">
	<div class="col-2">
			<label for="SwapTo" class="col-form-label">To</label>
	</div>
	<div class="col-4">
			<select class="form-select" @bind="SwapTo" type="text">
				<option value="" selected disabled>Please select</option>
				@{
					@foreach (var prp in NetworkList)
					{
						<option value="@prp">@prp</option>
					}
				}
			</select>
	</div>
	<div class="col-auto">
		<span  class="form-text">
			Buyer
		</span>
	</div>
</div>



 
<div class="row g-3 align-items-center mb-5 mt-2">
	<div class="col-2">
		<label for="Amount" class="col-form-label">Amount</label>
	</div>
	<div class="col-4">
		<input class="form-control" @bind="amountToBuy" />
	</div>
	<div class="col-auto">
		<span class="form-text">
			@SwapTo
		</span>
	</div>
</div>


<button class="btn btn-primary" @onclick="CreateSwap">Create Swap</button>

<button class="btn btn-primary" @onclick="Fetch">Fetch Swaps</button>

<p class="alert-danger">@error</p>

@if (swaps != null)
{

	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Swap Id</th>
				<th>Seller</th>
				<th>Buyer</th>
				<th>Date</th>
				<th>Is Mine</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var swap in swaps)
			{
				<tr>
					<td>@swap.SwapSessionId</td>
					<td>@Money.Satoshis(swap.CoinSeller.Amount) - @swap.CoinSeller.CoinSymbol</td>
					<td>@Money.Satoshis(swap.CoinBuyer.Amount) - @swap.CoinBuyer.CoinSymbol</td>
					<td>@swap.Created </td>
					<td>@(swap.CoinSeller.OwnerPubkey == mypubkey ? "I am seller" : swap.CoinBuyer.OwnerPubkey == mypubkey ? "I am buyer" : "not my swap")</td>
					<td>@swap.Status </td>
					<td><button class="btn btn-info" @onclick="() => this.ViewSwap(swap.SwapSessionId)">Details</button> </td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<SwapSession> swaps;
	Networks.Network network;
	List<string> NetworkList;

	string error;

	string SwapFrom = "STRAX";
	string SwapTo = "CITY";

	long amountToSell = 1;
	long amountToBuy = 10;

	string mypubkey;
	private async Task Fetch()
	{
		mypubkey = storage.GetWalletPubkey();

		this.swaps = await Http.GetFromJsonAsync<List<SwapSession>>("api/SwapCoordinator");

		// sync my swaps with the server swaps

	    var myswaps = storage.GetSwaps();

	    if (myswaps != null && this.swaps != null)
	    {
	        foreach (var mySwap in myswaps)
	        {
	            if (this.swaps.All(a => a.SwapSessionId != mySwap.SwapSessionId))
	            {
	                await Http.PostAsJsonAsync($"api/SwapCoordinator/update", mySwap);

	                this.swaps.Add(mySwap);

	                Logger.LogInformation($"Updated server with swap {mySwap.SwapSessionId}");

	            }
	        }
	    }
	}

	protected override async Task OnInitializedAsync()
	{
		NetworkList = globalData.Networks.Keys.ToList();

		await this.Fetch();
	}

	protected async Task CreateSwap()
	{
	    ExtKey.UseBCForHMACSHA512 = true;
	    NBitcoin.Crypto.Hashes.UseBCForHMACSHA512 = true;

		// check that the user has enough money
		error = string.Empty;
		if (SwapFrom == SwapTo) { error = "Cant swap to the same network"; return; }

		Networks.Network network = globalData.Networks[SwapFrom];
		AccountInfo? accountInfo = storage.GetAccountInfo(SwapFrom);

		if (accountInfo == null)
		{
			error = "Please scan the wallet";
			return;
		}

	    var amountToSellSats = Money.Coins(amountToSell);
	    var amountToBuySats = Money.Coins(amountToBuy);
	    var totalBalance = Money.Satoshis(accountInfo.TotalBalance);

		if (totalBalance < amountToSellSats)
		{
			error = "You do not have enough funds";
			return;
		}

		var myswaps = storage.GetSwaps();

		if (myswaps == null)
		{
			myswaps = new List<SwapSession>();
			storage.SetSwaps(myswaps);
		}

		var pubkey = storage.GetWalletPubkey();

		var totalBalanceInSwaps = myswaps.Sum(s =>
		{
            if(s.CoinSeller.OwnerPubkey == pubkey)
                return s.CoinSeller.Amount ;

            if (s.CoinBuyer.OwnerPubkey == pubkey)
                return s.CoinBuyer.Amount;

            return 0;
		});

	    var totalBalanceInSwapsSats = Money.Satoshis(totalBalanceInSwaps);

		Logger.LogInformation($"accountInfo.TotalBalance={accountInfo.TotalBalance} - totalBalanceInSwaps={totalBalanceInSwaps} - amountToSell={amountToSellSats}");

		if (totalBalance - totalBalanceInSwapsSats < amountToSellSats)
		{
			error = "funds are used in other swaps no funds left to make a swap";
			return;
		}

	    var sessionId = Guid.NewGuid().ToString("N");
	    var sharedSecret = GlobalData.GenerateSecret(storage.GetWalletWords(), sessionId);
	    var sharedSecretHash = Hashes.Hash160(sharedSecret.ToBytes());

		var postBody = new CreateSwapSession
			{
				OwnerPubkey = pubkey,
				FromCoinSymbol = SwapFrom,
				AmountToSell = amountToSellSats.Satoshi,
				ToCoinSymbol = SwapTo,
				AmountToBuy = amountToBuySats.Satoshi,
				SwapSessionId = sessionId,
				SharedSecretHash = sharedSecretHash.ToString()
				
			};

		await Http.PostAsJsonAsync($"api/SwapCoordinator/create", postBody);

		var swap = await Http.GetFromJsonAsync<SwapSession>($"api/SwapCoordinator/session/{postBody.SwapSessionId}");

		myswaps.Add(swap);

		storage.SetSwaps(myswaps);

		await this.Fetch();
	}

	protected async Task ViewSwap(string session)
	{
		NavigationManager.NavigateTo($"viewswap/{session}");
	}

}
