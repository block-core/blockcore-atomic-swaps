@page "/findswaps"

@using Blockcore.AtomicSwaps.Server.Controllers
@using NBitcoin
@using Blockcore.AtomicSwaps.BlockcoreWallet
@inject HttpClient Http
@inject Storage storage;
@inject SwapsConfiguration SwapsConfiguration;
@inject NavigationManager NavigationManager;
@inject ILogger<Index> Logger;
@inject IBlockcoreWalletConnector WalletConnector

<PageTitle>Find Atomic Swaps</PageTitle>

<h1>Find Atomic Swaps</h1>

<p>This component helps find available swaps.</p>

<button class="btn btn-primary" @onclick="Fetch">Fetch Swaps</button>

<p class="alert-danger">@error</p>

@if (swaps != null)
{

	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Swap Id</th>
				<th>Seller</th>
				<th>Buyer</th>
				<th>Date</th>
				<th>Is Mine</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var swap in swaps)
			{
				<tr>
					<td>@swap.SwapSessionId</td>
					<td>@Money.Satoshis(swap.CoinSeller.Amount) - @swap.CoinSeller.CoinSymbol</td>
					<td>@Money.Satoshis(swap.CoinBuyer.Amount) - @swap.CoinBuyer.CoinSymbol</td>
					<td>@swap.Created </td>
                    <td>@(_walletAccounts.HasAccountKey(swap.CoinSeller.SenderPubkey) ? "I am seller" : _walletAccounts.HasAccountKey(swap.CoinBuyer.SenderPubkey) ? "I am buyer" : "not my swap")</td>
					<td>@swap.Status </td>
					<td><button class="btn btn-info" @onclick="() => this.ViewSwap(swap.SwapSessionId)">Details</button> </td>
				</tr>
			}
        </tbody>
	</table>
}

@code {
	private List<SwapSession> swaps;
	Networks.Network network;
	List<string> NetworkList;

	string error;

	string SwapFrom = "STRAX";
	string SwapTo = "CITY";

	long amountToSell = 1;
	long amountToBuy = 10;
    private bool hasWallet;
	WalletAccounts? _walletAccounts;

	private async Task Fetch()
	{
	    this.swaps = await Http.GetFromJsonAsync<List<SwapSession>>("api/SwapCoordinator");
	}

	protected override async Task OnInitializedAsync()
	{
	    NetworkList = SwapsConfiguration.Networks.Keys.ToList();

	    if (await WalletConnector.HasBlockcoreWallet() == false)
	    {
	        hasWallet = false;
	        return;
	    }

	    hasWallet = true;

	    _walletAccounts = storage.GetOrCreate<WalletAccounts>();

		await this.Fetch();
	}

	protected async Task ViewSwap(string session)
	{
		NavigationManager.NavigateTo($"viewswap/{session}");
	}

}
